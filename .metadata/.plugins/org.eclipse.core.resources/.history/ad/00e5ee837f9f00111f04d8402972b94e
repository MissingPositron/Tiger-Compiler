/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
import syntaxtree.*;

        public class MiniJavaParser implements MiniJavaParserConstants {
                public static Position getPosition() {
                        return new Position(token.beginLine, token.beginColumn);
                }

/*END OF LEXER*/
/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/
 /*START OF PARSER*/
  static final public Program Program() throws ParseException {
         MainClass m; ClassDeclList cl;
    m = MainClass();
    cl = ClassDeclList();
                                             {if (true) return new Program(m, cl);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
          Identifier i1, i2; Statement s;
    jj_consume_token(CLASS);
    i1 = Identifier();
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    i2 = Identifier();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    s = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
                                                   {if (true) return new MainClass(i1, i2, s, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclList ClassDeclList() throws ParseException {
          ClassDeclList cl = new ClassDeclList(); ClassDecl c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDecl();
                            cl.addElement(c);
    }
                                                     {if (true) return cl;}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl() throws ParseException {
          ClassDecl cl;
    if (jj_2_1(3)) {
      cl = ClassDeclSimple();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        cl = ClassDeclExtends();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                           {if (true) return cl;}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDeclSimple() throws ParseException {
          Identifier i; VarDeclList v = new VarDeclList(); MethodDeclList m = new MethodDeclList();
    jj_consume_token(CLASS);
    i = Identifier();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INTEGER:
    case IDENTIFIER:
      v = VarDeclList();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      m = MethodDeclList();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                                                                               {if (true) return new ClassDeclSimple(i, v, m, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDeclExtends() throws ParseException {
          Identifier i1, i2; VarDeclList v = new VarDeclList(); MethodDeclList m = new MethodDeclList();
    jj_consume_token(CLASS);
    i1 = Identifier();
    jj_consume_token(EXTENDS);
    i2 = Identifier();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INTEGER:
    case IDENTIFIER:
      v = VarDeclList();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      m = MethodDeclList();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                                                                               {if (true) return new ClassDeclExtends(i1, i2, v, m, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpList() throws ParseException {
          ExpList el = new ExpList(); Exp e;
    e = Exp();
                    el.addElement(e);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      e = Exp();
                                                            el.addElement(e);
    }
                                                                                     {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
          Exp e;
    e = And();
                    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp And() throws ParseException {
          Exp e1=null,e2=null;
    e1 = LessThan();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      e2 = LessThan();
                                                {if (true) return new And(e1, e2, getPosition());}
    }
                                                                                              {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp LessThan() throws ParseException {
          Exp e1=null,e2=null;
    e1 = AdditiveExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
      e2 = AdditiveExp();
                                                     {if (true) return new LessThan(e1, e2, getPosition());}
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                                                                                                       {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AdditiveExp() throws ParseException {
          boolean usePlus = true; Exp e1=null,e2=null;
    e1 = Times();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                usePlus = true;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                            usePlus = false;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = Times();
                              if (usePlus) {if (true) return new Plus(e1, e2, getPosition());} else {if (true) return new Minus(e1, e2, getPosition());}
    }
                                                                                                                                       {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Times() throws ParseException {
          Exp e1=null,e2=null;
    e1 = PrefixExp();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(STAR);
      e2 = PrefixExp();
                                                   {if (true) return new Times(e1, e2, getPosition());}
    }
                                                                                                   {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp PrefixExp() throws ParseException {
          Exp e1;
    if (jj_2_2(3)) {
      e1 = Not();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case FALSE:
      case NEW:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
        e1 = PostfixExp();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                                      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Not() throws ParseException {
          Exp e1; boolean useNot = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                   useNot=true;
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    e1 = PostfixExp();
                                                     if(useNot) {if (true) return new Not(e1, getPosition());} else {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp PostfixExp() throws ParseException {
          Exp e1, e2; Identifier i; ExpList el = new ExpList() ;
    e1 = PrimaryExp();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        e2 = Exp();
        jj_consume_token(RBRACKET);
                                                          {if (true) return new ArrayLookup(e1, e2, getPosition());}
        break;
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_3(2)) {
          jj_consume_token(DOT);
          i = Identifier();
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
          case NOT:
          case FALSE:
          case NEW:
          case THIS:
          case TRUE:
          case INTEGER_LITERAL:
          case IDENTIFIER:
            el = ExpList();
            break;
          default:
            jj_la1[15] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
                                                                                          {if (true) return new Call(e1, i, el, getPosition());}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            jj_consume_token(DOT);
            jj_consume_token(LENGTH);
                                   {if (true) return new ArrayLength(e1, getPosition());}
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
                                                                                     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

 //Exp Call() : {} {}  
 //Exp Minus() : {} { <MINUS> }
 //Exp Plus() : {} { <PLUS> } 
 /* Primary Expressions */
  static final public Exp PrimaryExp() throws ParseException {
          Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      e = IntegerLiteral();
      break;
    case TRUE:
      e = True();
      break;
    case FALSE:
      e = False();
      break;
    case LPAREN:
      e = AssociativeExp();
      break;
    case IDENTIFIER:
      e = IdentifierExp();
      break;
    case THIS:
      e = This();
      break;
    default:
      jj_la1[18] = jj_gen;
      if (jj_2_4(2)) {
        e = NewArray();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          e = NewObject();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                                                                          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp IntegerLiteral() throws ParseException {
          Token t;
    t = jj_consume_token(INTEGER_LITERAL);
                                {if (true) return new IntegerLiteral(Integer.parseInt(t.image), getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Exp True() throws ParseException {
    jj_consume_token(TRUE);
                   {if (true) return new True(getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Exp False() throws ParseException {
    jj_consume_token(FALSE);
                    {if (true) return new False(getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AssociativeExp() throws ParseException {
          Exp e;
    jj_consume_token(LPAREN);
    e = Exp();
    jj_consume_token(RPAREN);
                                      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp IdentifierExp() throws ParseException {
          Identifier i;
    i = Identifier();
                           {if (true) return new IdentifierExp(i.s, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Exp This() throws ParseException {
    jj_consume_token(THIS);
                   {if (true) return new This(getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Exp NewArray() throws ParseException {
          Exp e;
    jj_consume_token(NEW);
    jj_consume_token(INTEGER);
    jj_consume_token(LBRACKET);
    e = Exp();
    jj_consume_token(RBRACKET);
                                                          {if (true) return new NewArray(e, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Exp NewObject() throws ParseException {
          Identifier i;
    jj_consume_token(NEW);
    i = Identifier();
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
                                                   {if (true) return new NewObject(i, getPosition());}
    throw new Error("Missing return statement in function");
  }

 //void ArrayLength() : {} {}
 //void ArrayLookup() : {} {}
  static final public Formal Formal() throws ParseException {
          Type t; Identifier i;
    t = Type();
    i = Identifier();
                                    {if (true) return new Formal(t, i, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList FormalList() throws ParseException {
          FormalList fl = new FormalList(); Formal f;
    f = Formal();
                       fl.addElement(f);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      f = Formal();
                                       fl.addElement(f);
    }
                                                                {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDecl() throws ParseException {
          Type t; Identifier i; FormalList fl= new FormalList(); VarDeclList vl= new VarDeclList();
                 StatementList sl= new StatementList(); Exp e;
    jj_consume_token(PUBLIC);
    t = Type();
    i = Identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INTEGER:
    case IDENTIFIER:
      fl = FormalList();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    if (jj_2_5(2)) {
      vl = VarDeclList();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case IF:
    case WHILE:
    case PRINT:
    case IDENTIFIER:
      sl = StatementList();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(RETURN);
    e = Exp();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
                                                                             {if (true) return new MethodDecl(t, i, fl, vl, sl, e, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDeclList MethodDeclList() throws ParseException {
          MethodDeclList ml = new MethodDeclList(); MethodDecl md;
    md = MethodDecl();
                           ml.addElement(md);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      md = MethodDecl();
                                                                   ml.addElement(md);
    }
                                                                                            {if (true) return ml;}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDecl() throws ParseException {
          Type t; Identifier i;
    t = Type();
    i = Identifier();
    jj_consume_token(SEMICOLON);
                                                {if (true) return new VarDecl(t, i, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public VarDeclList VarDeclList() throws ParseException {
          VarDeclList vl = new VarDeclList(); VarDecl v;
    v = VarDecl();
                        vl.addElement(v);
    label_9:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_9;
      }
      v = VarDecl();
                                                                         vl.addElement(v);
    }
                                                                                                  {if (true) return vl;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
          Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      s = Block();
      break;
    case IF:
      s = If();
      break;
    case PRINT:
      s = Print();
      break;
    case WHILE:
      s = While();
      break;
    default:
      jj_la1[24] = jj_gen;
      if (jj_2_7(2)) {
        s = Assign();
      } else if (jj_2_8(2)) {
        s = ArrayAssign();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          s = SeqAssign();
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                                                                                                                                  {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementList StatementList() throws ParseException {
          StatementList sl = new StatementList(); Statement s;
    s = Statement();
                          sl.addElement(s);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case WHILE:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      s = Statement();
                                sl.addElement(s);
    }
                                                        {if (true) return sl;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Block() throws ParseException {
          StatementList sl=null;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case IF:
    case WHILE:
    case PRINT:
    case IDENTIFIER:
      sl = StatementList();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                                                   {if (true) return new Block(sl, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Statement If() throws ParseException {
          Exp e; Statement s1, s2;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    e = Exp();
    jj_consume_token(RPAREN);
    s1 = Statement();
    jj_consume_token(ELSE);
    s2 = Statement();
                                                                                {if (true) return new If(e, s1, s2, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Print() throws ParseException {
          Exp e;
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    e = Exp();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                                                          {if (true) return new Print(e, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Statement While() throws ParseException {
          Exp e; Statement s;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e = Exp();
    jj_consume_token(RPAREN);
    s = Statement();
                                                            {if (true) return new While(e,s, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Assign() throws ParseException {
          Identifier i; Exp e;
    i = Identifier();
    jj_consume_token(ASSIGN);
    e = Exp();
    jj_consume_token(SEMICOLON);
                                                        {if (true) return new Assign(i, e, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Statement ArrayAssign() throws ParseException {
          Identifier i; Exp e1, e2;
    i = Identifier();
    jj_consume_token(LBRACKET);
    e1 = Exp();
    jj_consume_token(RBRACKET);
    jj_consume_token(ASSIGN);
    e2 = Exp();
    jj_consume_token(SEMICOLON);
                                                                                        {if (true) return new ArrayAssign(i, e1, e2, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Statement SeqAssign() throws ParseException {
          Identifier i; Exp e1, e2;
    i = Identifier();
    jj_consume_token(ASSIGN);
    jj_consume_token(SEQ);
    jj_consume_token(LPAREN);
    e1 = IntegerLiteral();
    jj_consume_token(COLON);
    e2 = IntegerLiteral();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                                                                                                                        {if (true) return new SeqAssign(i, e1, e2, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
          Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t = BooleanType();
      break;
    case IDENTIFIER:
      t = IdentifierType();
      break;
    case INTEGER:
      t = IntOrIntArrayType();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                                               {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Type BooleanType() throws ParseException {
    jj_consume_token(BOOLEAN);
                      {if (true) return new BooleanType(getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Type IdentifierType() throws ParseException {
          Identifier i;
    i = Identifier();
                           {if (true) return new IdentifierType(i.s, getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Type IntOrIntArrayType() throws ParseException {
          Type t;
    jj_consume_token(INTEGER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                                    {if (true) return new IntArrayType(getPosition());}
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                                                                                                  {if (true) return new IntegerType(getPosition());}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
          Token t;
    t = jj_consume_token(IDENTIFIER);
                           {if (true) return new Identifier(t.image, getPosition());}
    throw new Error("Missing return statement in function");
  }

 /*END OF PARSER*/

/* OLD GOAL */
/*void Goal() :
{}
{
  ( MiniJavaToken() )*	  
  <EOF> 
  { System.out.println("Successfully recognized all tokens"); }
}
*/
  static final public Program Goal() throws ParseException {
          Program p;
    p = Program();
    jj_consume_token(0);
                              {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public void MiniJavaToken() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case STATIC:
      jj_consume_token(STATIC);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    case MAIN:
      jj_consume_token(MAIN);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      break;
    case RBRACKET:
      jj_consume_token(RBRACKET);
      break;
    case RPAREN:
      jj_consume_token(RPAREN);
      break;
    case RBRACE:
      jj_consume_token(RBRACE);
      break;
    case EXTENDS:
      jj_consume_token(EXTENDS);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      break;
    case COMMA:
      jj_consume_token(COMMA);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case IF:
      jj_consume_token(IF);
      break;
    case ELSE:
      jj_consume_token(ELSE);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      break;
    case PRINT:
      jj_consume_token(PRINT);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case DOT:
      jj_consume_token(DOT);
      break;
    case LENGTH:
      jj_consume_token(LENGTH);
      break;
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    case NEW:
      jj_consume_token(NEW);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_20() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_21()) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(INTEGER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x2000000,0x1000000,0x0,0x1000000,0x0,0x10000,0x400000,0x80000,0x300000,0x300000,0x0,0x20000200,0x800000,0x20800,0x20800200,0x800,0x20000,0x20000200,0x0,0x10000,0x1000000,0xc0002000,0x0,0xc0002000,0x0,0xc0002000,0xc0002000,0x1000000,0x800,0xfbfffe00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10001,0x10,0x10001,0x10,0x0,0x0,0x0,0x0,0x0,0x40,0x18608,0x0,0x0,0x18608,0x0,0x0,0x18600,0x8,0x0,0x10001,0x10800,0x10,0x800,0x10000,0x10800,0x10800,0x10001,0x0,0x19fff,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
